// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum VoteType {
  UP
  DOWN
}

model User {
  id                    String         @id
  username              String         @unique
  displayName           String
  email                 String?        @unique
  passwordHash          String?
  googleId              String?        @unique
  avatarUrl             String?
  bio                   String?
  sessions              Session[]
  posts                 Post[]
  following             Follow[]       @relation("Following")
  followers             Follow[]       @relation("Followers")
  likes                 Like[]
  bookmarks             Bookmark[]
  receivedNotifications Notification[] @relation("Recipient")
  issuedNotifications   Notification[] @relation("Issuer")
  comments              Comment[]

  createdAt DateTime @default(now())
  
  @@map("users")
  Reaction Reaction[]
}

model Session {
  id        String   @id @default(cuid())
  sessionToken String?   @unique
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Follow {
  followerId  String
  follower    User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User   @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Post {
  id                  String         @id @default(cuid())
  content             String
  userId              String
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  attachments         Media[]
  likes               Like[]
  bookmarks           Bookmark[]
  comments            Comment[]
  linkedNotifications Notification[]

  createdAt DateTime @default(now())

  @@map("posts")
}

model Media {
  id     String    @id @default(cuid())
  postId String?
  post   Post?     @relation(fields: [postId], references: [id], onDelete: SetNull)
  type   MediaType
  url    String

  createdAt DateTime @default(now())

  @@map("post_media")
}

enum MediaType {
  IMAGE
  VIDEO
}

model Comment {
  id          String    @id @default(cuid())
  content     String
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId      String
  post        Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  parentId    String?
  parent      Comment?   @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies     Comment[]  @relation("CommentReplies")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime?  @updatedAt // Track when the comment was last updated
  userLikes   String[]   @default([]) // Array of user IDs who liked the comment
  isDeleted   Boolean    @default(false) // Indicates if the comment is deleted
  isReported   Boolean    @default(false) // Indicates if the comment is reported
  CommentHistory CommentHistory[]
  likes Like[]

  @@map("comments")
  Reaction Reaction[]
}

model Like {
  id      String   @id @default(cuid()) // Make this optional if needed
  userId  String?
  user    User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId  String?  // Optional field for post likes
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentId String? // Optional field for comment likes
  comment Comment?  @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, postId]) // Unique constraint for post likes
  @@unique([userId, commentId]) // Unique constraint for comment likes
  @@map("likes")
}

model Bookmark {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@map("bookmarks")
}

model Notification {
  id          String           @id @default(cuid())
  recipientId String
  recipient   User             @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  issuerId    String
  issuer      User             @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)
  postId      String?
  post        Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  type        NotificationType
  read        Boolean          @default(false)

  createdAt DateTime @default(now())

  @@map("notifications")
}

enum NotificationType {
  LIKE
  FOLLOW
  COMMENT
  REPLY
}

model CommentHistory {
  id        String   @id @default(cuid())
  commentId String
  content   String
  updatedAt DateTime @default(now())

  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Reaction {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  commentId String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  type      ReactionType

  @@unique([userId, commentId]) // Ensure a user can only react once per comment
}

enum ReactionType {
  LIKE
  LOVE
  LAUGH
  SAD
  ANGRY
}

